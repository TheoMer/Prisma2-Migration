### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  address_line: String!
  card_name: String!
  city: String!
  country: String!
  createdAt: Date!
  id: String!
  postcode: String!
  updatedAt: Date!
  User: User!
}

input AddressCreateManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutUserInput!]
}

input AddressCreateWithoutUserInput {
  address_line: String!
  card_name: String!
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  postcode: String!
  updatedAt: DateTime
}

input AddressFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressOrderByInput {
  address_line: OrderByArg
  card_name: OrderByArg
  city: OrderByArg
  country: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  postcode: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
}

input AddressWhereInput {
  address_line: StringFilter
  AND: [AddressWhereInput!]
  card_name: StringFilter
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  postcode: StringFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
}

input AddressWhereUniqueInput {
  id: String
}

type CartItem {
  createdAt: Date!
  id: String!
  Item: Item
  ItemVariants: ItemVariants
  quantity: Int!
  updatedAt: Date!
  User: User!
}

input CartItemCreateManyWithoutItemInput {
  connect: [CartItemWhereUniqueInput!]
  create: [CartItemCreateWithoutItemInput!]
}

input CartItemCreateManyWithoutItemVariantsInput {
  connect: [CartItemWhereUniqueInput!]
  create: [CartItemCreateWithoutItemVariantsInput!]
}

input CartItemCreateManyWithoutUserInput {
  connect: [CartItemWhereUniqueInput!]
  create: [CartItemCreateWithoutUserInput!]
}

input CartItemCreateWithoutItemInput {
  createdAt: DateTime
  id: String
  ItemVariants: ItemVariantsCreateOneWithoutCartitemsInput
  quantity: Int
  updatedAt: DateTime
  User: UserCreateOneWithoutCartInput!
}

input CartItemCreateWithoutItemVariantsInput {
  createdAt: DateTime
  id: String
  Item: ItemCreateOneWithoutCartitemsInput
  quantity: Int
  updatedAt: DateTime
  User: UserCreateOneWithoutCartInput!
}

input CartItemCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  Item: ItemCreateOneWithoutCartitemsInput
  ItemVariants: ItemVariantsCreateOneWithoutCartitemsInput
  quantity: Int
  updatedAt: DateTime
}

input CartItemFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  item: OrderByArg
  itemvariants: OrderByArg
  quantity: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  item: NullableStringFilter
  Item: ItemWhereInput
  itemvariants: NullableStringFilter
  ItemVariants: ItemVariantsWhereInput
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  quantity: IntFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
}

input CartItemWhereUniqueInput {
  id: String
}

type Color {
  createdAt: Date!
  id: String!
  label: String
  name: String!
  updatedAt: Date!
}

input ColorCreateOneWithoutItemInput {
  connect: ColorWhereUniqueInput
  create: ColorCreateWithoutItemInput
}

input ColorCreateOneWithoutItemvariantsInput {
  connect: ColorWhereUniqueInput
  create: ColorCreateWithoutItemvariantsInput
}

input ColorCreateOneWithoutOrderitemInput {
  connect: ColorWhereUniqueInput
  create: ColorCreateWithoutOrderitemInput
}

input ColorCreateWithoutItemInput {
  createdAt: DateTime
  id: String
  itemvariants: ItemVariantsCreateManyWithoutColorInput
  label: String
  name: String!
  orderitem: OrderItemCreateManyWithoutColorInput
  updatedAt: DateTime
}

input ColorCreateWithoutItemvariantsInput {
  createdAt: DateTime
  id: String
  item: ItemCreateManyWithoutColorInput
  label: String
  name: String!
  orderitem: OrderItemCreateManyWithoutColorInput
  updatedAt: DateTime
}

input ColorCreateWithoutOrderitemInput {
  createdAt: DateTime
  id: String
  item: ItemCreateManyWithoutColorInput
  itemvariants: ItemVariantsCreateManyWithoutColorInput
  label: String
  name: String!
  updatedAt: DateTime
}

input ColorOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  label: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  item: ItemFilter
  itemvariants: ItemVariantsFilter
  label: NullableStringFilter
  name: StringFilter
  NOT: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  orderitem: OrderItemFilter
  updatedAt: DateTimeFilter
}

input ColorWhereUniqueInput {
  id: String
  name: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Item {
  cartitems(cursor: CartItemWhereUniqueInput, orderBy: CartItemOrderByInput, skip: Int, take: Int, where: CartItemWhereInput): [CartItem!]!
  Color: Color!
  createdAt: Date!
  description: String!
  id: String!
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants(cursor: ItemVariantsWhereUniqueInput, orderBy: ItemVariantsOrderByInput, skip: Int, take: Int, where: ItemVariantsWhereInput): [ItemVariants!]!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int!
  Size: Size!
  title: String!
  updatedAt: Date!
  User: User!
  userIdentity: String!
}

input ItemCreateInput {
  cartitems: CartItemCreateManyWithoutItemInput
  Color: ColorCreateOneWithoutItemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants: ItemVariantsCreateManyWithoutItemInput
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemsInput!
  userIdentity: String
}

input ItemCreateManyWithoutColorInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutColorInput!]
}

input ItemCreateManyWithoutSizeInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutSizeInput!]
}

input ItemCreateManyWithoutUserInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutUserInput!]
}

input ItemCreateOneWithoutCartitemsInput {
  connect: ItemWhereUniqueInput
  create: ItemCreateWithoutCartitemsInput
}

input ItemCreateOneWithoutItemvariantsInput {
  connect: ItemWhereUniqueInput
  create: ItemCreateWithoutItemvariantsInput
}

input ItemCreateWithoutCartitemsInput {
  Color: ColorCreateOneWithoutItemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants: ItemVariantsCreateManyWithoutItemInput
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemsInput!
  userIdentity: String
}

input ItemCreateWithoutColorInput {
  cartitems: CartItemCreateManyWithoutItemInput
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants: ItemVariantsCreateManyWithoutItemInput
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemsInput!
  userIdentity: String
}

input ItemCreateWithoutItemvariantsInput {
  cartitems: CartItemCreateManyWithoutItemInput
  Color: ColorCreateOneWithoutItemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemsInput!
  userIdentity: String
}

input ItemCreateWithoutSizeInput {
  cartitems: CartItemCreateManyWithoutItemInput
  Color: ColorCreateOneWithoutItemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants: ItemVariantsCreateManyWithoutItemInput
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemsInput!
  userIdentity: String
}

input ItemCreateWithoutUserInput {
  cartitems: CartItemCreateManyWithoutItemInput
  Color: ColorCreateOneWithoutItemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  itemvariants: ItemVariantsCreateManyWithoutItemInput
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemInput!
  title: String!
  updatedAt: DateTime
  userIdentity: String
}

input ItemFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

input ItemOrderByInput {
  color: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  image: OrderByArg
  image2: OrderByArg
  image3: OrderByArg
  image4: OrderByArg
  image5: OrderByArg
  image6: OrderByArg
  largeImage: OrderByArg
  largeImage2: OrderByArg
  largeImage3: OrderByArg
  largeImage4: OrderByArg
  largeImage5: OrderByArg
  largeImage6: OrderByArg
  mainDescription: OrderByArg
  price: OrderByArg
  quantity: OrderByArg
  size: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
  userIdentity: OrderByArg
}

type ItemVariants {
  cartitems(cursor: CartItemWhereUniqueInput, orderBy: CartItemOrderByInput, skip: Int, take: Int, where: CartItemWhereInput): [CartItem!]!
  Color: Color!
  createdAt: Date!
  description: String!
  id: String!
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  item: String!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int!
  Size: Size!
  title: String!
  updatedAt: Date!
  User: User!
}

input ItemVariantsCreateManyWithoutColorInput {
  connect: [ItemVariantsWhereUniqueInput!]
  create: [ItemVariantsCreateWithoutColorInput!]
}

input ItemVariantsCreateManyWithoutItemInput {
  connect: [ItemVariantsWhereUniqueInput!]
  create: [ItemVariantsCreateWithoutItemInput!]
}

input ItemVariantsCreateManyWithoutSizeInput {
  connect: [ItemVariantsWhereUniqueInput!]
  create: [ItemVariantsCreateWithoutSizeInput!]
}

input ItemVariantsCreateManyWithoutUserInput {
  connect: [ItemVariantsWhereUniqueInput!]
  create: [ItemVariantsCreateWithoutUserInput!]
}

input ItemVariantsCreateOneWithoutCartitemsInput {
  connect: ItemVariantsWhereUniqueInput
  create: ItemVariantsCreateWithoutCartitemsInput
}

input ItemVariantsCreateWithoutCartitemsInput {
  Color: ColorCreateOneWithoutItemvariantsInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  Item: ItemCreateOneWithoutItemvariantsInput!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemvariantsInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemvariantsInput!
}

input ItemVariantsCreateWithoutColorInput {
  cartitems: CartItemCreateManyWithoutItemVariantsInput
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  Item: ItemCreateOneWithoutItemvariantsInput!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemvariantsInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemvariantsInput!
}

input ItemVariantsCreateWithoutItemInput {
  cartitems: CartItemCreateManyWithoutItemVariantsInput
  Color: ColorCreateOneWithoutItemvariantsInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemvariantsInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemvariantsInput!
}

input ItemVariantsCreateWithoutSizeInput {
  cartitems: CartItemCreateManyWithoutItemVariantsInput
  Color: ColorCreateOneWithoutItemvariantsInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  Item: ItemCreateOneWithoutItemvariantsInput!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutItemvariantsInput!
}

input ItemVariantsCreateWithoutUserInput {
  cartitems: CartItemCreateManyWithoutItemVariantsInput
  Color: ColorCreateOneWithoutItemvariantsInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String
  image2: String
  image3: String
  image4: String
  image5: String
  image6: String
  Item: ItemCreateOneWithoutItemvariantsInput!
  largeImage: String
  largeImage2: String
  largeImage3: String
  largeImage4: String
  largeImage5: String
  largeImage6: String
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutItemvariantsInput!
  title: String!
  updatedAt: DateTime
}

input ItemVariantsFilter {
  every: ItemVariantsWhereInput
  none: ItemVariantsWhereInput
  some: ItemVariantsWhereInput
}

input ItemVariantsOrderByInput {
  color: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  image: OrderByArg
  image2: OrderByArg
  image3: OrderByArg
  image4: OrderByArg
  image5: OrderByArg
  image6: OrderByArg
  item: OrderByArg
  largeImage: OrderByArg
  largeImage2: OrderByArg
  largeImage3: OrderByArg
  largeImage4: OrderByArg
  largeImage5: OrderByArg
  largeImage6: OrderByArg
  mainDescription: OrderByArg
  price: OrderByArg
  quantity: OrderByArg
  size: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
}

input ItemVariantsWhereInput {
  AND: [ItemVariantsWhereInput!]
  cartitems: CartItemFilter
  color: StringFilter
  Color: ColorWhereInput
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  image: NullableStringFilter
  image2: NullableStringFilter
  image3: NullableStringFilter
  image4: NullableStringFilter
  image5: NullableStringFilter
  image6: NullableStringFilter
  item: StringFilter
  Item: ItemWhereInput
  largeImage: NullableStringFilter
  largeImage2: NullableStringFilter
  largeImage3: NullableStringFilter
  largeImage4: NullableStringFilter
  largeImage5: NullableStringFilter
  largeImage6: NullableStringFilter
  mainDescription: StringFilter
  NOT: [ItemVariantsWhereInput!]
  OR: [ItemVariantsWhereInput!]
  price: IntFilter
  quantity: IntFilter
  size: StringFilter
  Size: SizeWhereInput
  title: StringFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
}

input ItemVariantsWhereUniqueInput {
  id: String
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  cartitems: CartItemFilter
  color: StringFilter
  Color: ColorWhereInput
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  image: NullableStringFilter
  image2: NullableStringFilter
  image3: NullableStringFilter
  image4: NullableStringFilter
  image5: NullableStringFilter
  image6: NullableStringFilter
  itemvariants: ItemVariantsFilter
  largeImage: NullableStringFilter
  largeImage2: NullableStringFilter
  largeImage3: NullableStringFilter
  largeImage4: NullableStringFilter
  largeImage5: NullableStringFilter
  largeImage6: NullableStringFilter
  mainDescription: StringFilter
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  price: IntFilter
  quantity: IntFilter
  size: StringFilter
  Size: SizeWhereInput
  title: StringFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
  userIdentity: StringFilter
}

input ItemWhereUniqueInput {
  id: String
}

type Mutation {
  addItemVariantsToCart(id: ID!): CartItem
  addToCart(id: ID!): CartItem
  createAddress(address_line: String!, card_name: String!, city: String!, country: String!, email: String!, postcode: String!, userId: ID!): Address!
  createItem(data: ItemCreateInput!): Item!
  createOrder(address_line: String!, card_brand: String!, card_name: String!, city: String!, country: String!, last4card_digits: String!, postcode: String!, token: String!): Order!
  createSiteVisits(url: String, urlReferer: String, userAgent: String, userID: String, userIP: String, userType: String): SiteVisits
  deleteItem(id: ID!): Item
  removeFromCart(id: ID!, itemId: String!): CartItem
  requestReset(email: String!): SuccessMessage
  resetPassword(confirmPassword: String!, password: String!, resetToken: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  signup(email: String!, name: String!, password: String!): User!
  updateAddress(address_line: String!, card_name: String!, city: String!, country: String!, email: String!, postcode: String!, userId: ID!): Address!
  updateCartItem(id: ID!, quantity: Int): CartItem
  updateGuestEmail(email: String!, userId: ID!): User!
  updateItem(color: ColorCreateOneWithoutItemInput, description: String!, id: ID!, image: String, largeImage: String, mainDescription: String!, price: Int!, quantity: Int!, size: SizeCreateOneWithoutItemInput, title: String!): Item!
  updatePermissions(permissions2: [Permission2!], userId: ID!): User
}

input NodeIdPositionCompoundUniqueInput {
  nodeId: String!
  position: Int!
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Order {
  address_line: String!
  card_brand: String!
  card_name: String!
  charge: String!
  city: String!
  country: String!
  createdAt: Date!
  id: String!
  items(cursor: OrderItemWhereUniqueInput, orderBy: OrderItemOrderByInput, skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  last4card_digits: String!
  postcode: String!
  total: Int!
  updatedAt: Date!
  User: User!
}

enum OrderByArg {
  asc
  desc
}

input OrderCreateManyWithoutUserInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutUserInput!]
}

input OrderCreateOneWithoutItemsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutItemsInput
}

input OrderCreateWithoutItemsInput {
  address_line: String!
  card_brand: String!
  card_name: String!
  charge: String!
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  last4card_digits: String!
  postcode: String!
  total: Int!
  updatedAt: DateTime
  User: UserCreateOneWithoutOrderInput!
}

input OrderCreateWithoutUserInput {
  address_line: String!
  card_brand: String!
  card_name: String!
  charge: String!
  city: String!
  country: String!
  createdAt: DateTime
  id: String
  items: OrderItemCreateManyWithoutOrderInput
  last4card_digits: String!
  postcode: String!
  total: Int!
  updatedAt: DateTime
}

input OrderFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderItem {
  Color: Color!
  createdAt: Date!
  description: String!
  id: String!
  image: String!
  itemid: String!
  largeImage: String!
  mainDescription: String!
  order: String!
  Order: Order!
  price: Int!
  quantity: Int!
  Size: Size!
  title: String!
  updatedAt: Date!
  User: User!
}

input OrderItemCreateManyWithoutColorInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutColorInput!]
}

input OrderItemCreateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateManyWithoutSizeInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutSizeInput!]
}

input OrderItemCreateManyWithoutUserInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutUserInput!]
}

input OrderItemCreateWithoutColorInput {
  createdAt: DateTime
  description: String!
  id: String
  image: String!
  itemid: String!
  largeImage: String!
  mainDescription: String!
  Order: OrderCreateOneWithoutItemsInput!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutOrderitemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutOrderItemInput!
}

input OrderItemCreateWithoutOrderInput {
  Color: ColorCreateOneWithoutOrderitemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String!
  itemid: String!
  largeImage: String!
  mainDescription: String!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutOrderitemInput!
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutOrderItemInput!
}

input OrderItemCreateWithoutSizeInput {
  Color: ColorCreateOneWithoutOrderitemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String!
  itemid: String!
  largeImage: String!
  mainDescription: String!
  Order: OrderCreateOneWithoutItemsInput!
  price: Int!
  quantity: Int
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutOrderItemInput!
}

input OrderItemCreateWithoutUserInput {
  Color: ColorCreateOneWithoutOrderitemInput!
  createdAt: DateTime
  description: String!
  id: String
  image: String!
  itemid: String!
  largeImage: String!
  mainDescription: String!
  Order: OrderCreateOneWithoutItemsInput!
  price: Int!
  quantity: Int
  Size: SizeCreateOneWithoutOrderitemInput!
  title: String!
  updatedAt: DateTime
}

input OrderItemFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

input OrderItemOrderByInput {
  color: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  image: OrderByArg
  itemid: OrderByArg
  largeImage: OrderByArg
  mainDescription: OrderByArg
  order: OrderByArg
  price: OrderByArg
  quantity: OrderByArg
  size: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  color: StringFilter
  Color: ColorWhereInput
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  image: StringFilter
  itemid: StringFilter
  largeImage: StringFilter
  mainDescription: StringFilter
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  order: StringFilter
  Order: OrderWhereInput
  price: IntFilter
  quantity: IntFilter
  size: StringFilter
  Size: SizeWhereInput
  title: StringFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
}

input OrderItemWhereUniqueInput {
  id: String
}

input OrderOrderByInput {
  address_line: OrderByArg
  card_brand: OrderByArg
  card_name: OrderByArg
  charge: OrderByArg
  city: OrderByArg
  country: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  last4card_digits: OrderByArg
  postcode: OrderByArg
  total: OrderByArg
  updatedAt: OrderByArg
  user: OrderByArg
}

input OrderWhereInput {
  address_line: StringFilter
  AND: [OrderWhereInput!]
  card_brand: StringFilter
  card_name: StringFilter
  charge: StringFilter
  city: StringFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  items: OrderItemFilter
  last4card_digits: StringFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  postcode: StringFilter
  total: IntFilter
  updatedAt: DateTimeFilter
  user: StringFilter
  User: UserWhereInput
}

input OrderWhereUniqueInput {
  id: String
}

enum Permission2 {
  ADMIN
  GUEST_USER
  ITEMCREATE
  ITEMDELETE
  ITEMUPDATE
  PERMISSIONUPDATE
  USER
}

type Query {
  colors(cursor: ColorWhereUniqueInput, orderBy: ColorOrderByInput, skip: Int, take: Int, where: ColorWhereInput): [Color!]!
  item(where: ItemWhereUniqueInput!): Item
  items(cursor: ItemWhereUniqueInput, orderBy: ItemOrderByInput, skip: Int, take: Int, where: ItemWhereInput): [Item!]!
  itemVariants(cursor: ItemVariantsWhereUniqueInput, orderBy: ItemVariantsOrderByInput, skip: Int, take: Int, where: ItemVariantsWhereInput): [ItemVariants!]!
  me: User
  order(id: ID!): Order
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  sizes(cursor: SizeWhereUniqueInput, orderBy: SizeOrderByInput, skip: Int, take: Int, where: SizeWhereInput): [Size!]!
  users(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type SiteVisits {
  createdAt: Date!
  id: String!
  updatedAt: Date!
  url: String
  urlReferer: String
  userAgent: String
  userID: String
  userIP: String
  userType: String
}

type Size {
  createdAt: Date!
  id: String!
  label: String
  name: String!
  updatedAt: Date!
}

input SizeCreateOneWithoutItemInput {
  connect: SizeWhereUniqueInput
  create: SizeCreateWithoutItemInput
}

input SizeCreateOneWithoutItemvariantsInput {
  connect: SizeWhereUniqueInput
  create: SizeCreateWithoutItemvariantsInput
}

input SizeCreateOneWithoutOrderitemInput {
  connect: SizeWhereUniqueInput
  create: SizeCreateWithoutOrderitemInput
}

input SizeCreateWithoutItemInput {
  createdAt: DateTime
  id: String
  itemvariants: ItemVariantsCreateManyWithoutSizeInput
  label: String
  name: String!
  orderitem: OrderItemCreateManyWithoutSizeInput
  updatedAt: DateTime
}

input SizeCreateWithoutItemvariantsInput {
  createdAt: DateTime
  id: String
  item: ItemCreateManyWithoutSizeInput
  label: String
  name: String!
  orderitem: OrderItemCreateManyWithoutSizeInput
  updatedAt: DateTime
}

input SizeCreateWithoutOrderitemInput {
  createdAt: DateTime
  id: String
  item: ItemCreateManyWithoutSizeInput
  itemvariants: ItemVariantsCreateManyWithoutSizeInput
  label: String
  name: String!
  updatedAt: DateTime
}

input SizeOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  label: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input SizeWhereInput {
  AND: [SizeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  item: ItemFilter
  itemvariants: ItemVariantsFilter
  label: NullableStringFilter
  name: StringFilter
  NOT: [SizeWhereInput!]
  OR: [SizeWhereInput!]
  orderitem: OrderItemFilter
  updatedAt: DateTimeFilter
}

input SizeWhereUniqueInput {
  id: String
  name: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type SuccessMessage {
  message: String!
}

type User {
  address(cursor: AddressWhereUniqueInput, orderBy: AddressOrderByInput, skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  cart(cursor: CartItemWhereUniqueInput, skip: Int, take: Int): [CartItem!]!
  createdAt: Date!
  email: String!
  id: String!
  items(cursor: ItemWhereUniqueInput, skip: Int, take: Int): [Item!]!
  itemvariants(cursor: ItemVariantsWhereUniqueInput, skip: Int, take: Int): [ItemVariants!]!
  name: String!
  order(cursor: OrderWhereUniqueInput, skip: Int, take: Int): [Order!]!
  OrderItem(cursor: OrderItemWhereUniqueInput, skip: Int, take: Int): [OrderItem!]!
  password: String!
  permissions2: [Permission2!]!
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: Date!
}

input User_permissionsCreateManyWithoutUserInput {
  connect: [User_permissionsWhereUniqueInput!]
  create: [User_permissionsCreateWithoutUserInput!]
}

input User_permissionsCreateWithoutUserInput {
  position: Int!
  value: String!
}

input User_permissionsFilter {
  every: User_permissionsWhereInput
  none: User_permissionsWhereInput
  some: User_permissionsWhereInput
}

input User_permissionsWhereInput {
  AND: [User_permissionsWhereInput!]
  nodeId: StringFilter
  NOT: [User_permissionsWhereInput!]
  OR: [User_permissionsWhereInput!]
  position: IntFilter
  User: UserWhereInput
  value: StringFilter
}

input User_permissionsWhereUniqueInput {
  nodeId_position: NodeIdPositionCompoundUniqueInput
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
}

input UserCreateOneWithoutItemsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutItemsInput
}

input UserCreateOneWithoutItemvariantsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutItemvariantsInput
}

input UserCreateOneWithoutOrderInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrderInput
}

input UserCreateOneWithoutOrderItemInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrderItemInput
}

input UserCreatepermissions2Input {
  set: [Permission2!]
}

input UserCreateWithoutCartInput {
  address: AddressCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  items: ItemCreateManyWithoutUserInput
  itemvariants: ItemVariantsCreateManyWithoutUserInput
  name: String!
  order: OrderCreateManyWithoutUserInput
  OrderItem: OrderItemCreateManyWithoutUserInput
  password: String!
  permissions2: UserCreatepermissions2Input
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: DateTime
  User_permissions: User_permissionsCreateManyWithoutUserInput
}

input UserCreateWithoutItemsInput {
  address: AddressCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  itemvariants: ItemVariantsCreateManyWithoutUserInput
  name: String!
  order: OrderCreateManyWithoutUserInput
  OrderItem: OrderItemCreateManyWithoutUserInput
  password: String!
  permissions2: UserCreatepermissions2Input
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: DateTime
  User_permissions: User_permissionsCreateManyWithoutUserInput
}

input UserCreateWithoutItemvariantsInput {
  address: AddressCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  items: ItemCreateManyWithoutUserInput
  name: String!
  order: OrderCreateManyWithoutUserInput
  OrderItem: OrderItemCreateManyWithoutUserInput
  password: String!
  permissions2: UserCreatepermissions2Input
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: DateTime
  User_permissions: User_permissionsCreateManyWithoutUserInput
}

input UserCreateWithoutOrderInput {
  address: AddressCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  items: ItemCreateManyWithoutUserInput
  itemvariants: ItemVariantsCreateManyWithoutUserInput
  name: String!
  OrderItem: OrderItemCreateManyWithoutUserInput
  password: String!
  permissions2: UserCreatepermissions2Input
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: DateTime
  User_permissions: User_permissionsCreateManyWithoutUserInput
}

input UserCreateWithoutOrderItemInput {
  address: AddressCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  items: ItemCreateManyWithoutUserInput
  itemvariants: ItemVariantsCreateManyWithoutUserInput
  name: String!
  order: OrderCreateManyWithoutUserInput
  password: String!
  permissions2: UserCreatepermissions2Input
  resetToken: String
  resetTokenExpiry: Float
  updatedAt: DateTime
  User_permissions: User_permissionsCreateManyWithoutUserInput
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  password: OrderByArg
  resetToken: OrderByArg
  resetTokenExpiry: OrderByArg
  updatedAt: OrderByArg
}

input UserWhereInput {
  address: AddressFilter
  AND: [UserWhereInput!]
  cart: CartItemFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  items: ItemFilter
  itemvariants: ItemVariantsFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  order: OrderFilter
  OrderItem: OrderItemFilter
  password: StringFilter
  resetToken: NullableStringFilter
  resetTokenExpiry: NullableFloatFilter
  updatedAt: DateTimeFilter
  User_permissions: User_permissionsFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
